//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/abcClusteringProtocol/ABCRoutingPacket.msg.
//

#ifndef _ABCROUTINGPACKET_M_H_
#define _ABCROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/abcClusteringProtocol/ABCRoutingPacket.msg:26</tt> by nedtool.
 * <pre>
 * enum ABCRoutingPacket_Type
 * {
 * 
 *     ABC_ROUTING_ADV_PACKET = 1;
 *     ABC_ROUTING_JOIN_PACKET = 2;
 *     ABC_ROUTING_TDMA_PACKET = 3;
 *     ABC_ROUTING_DATA_PACKET = 4;
 * }
 * </pre>
 */
enum ABCRoutingPacket_Type {
    ABC_ROUTING_ADV_PACKET = 1,
    ABC_ROUTING_JOIN_PACKET = 2,
    ABC_ROUTING_TDMA_PACKET = 3,
    ABC_ROUTING_DATA_PACKET = 4
};

/**
 * Class generated from <tt>src/node/communication/routing/abcClusteringProtocol/ABCRoutingPacket.msg:34</tt> by nedtool.
 * <pre>
 * packet ABCRoutingPacket extends RoutingPacket
 * {
 *     int type_packet;
 *     int hop_numb;
 *     int sum_energy;
 *     int residual_energy;
 *     int min_energy;
 *     int ABCRoutingPacketKind @enum(ABCRoutingPacket_Type);
 *     int schedule[];
 *     int path[];
 * }
 * </pre>
 */
class ABCRoutingPacket : public ::RoutingPacket
{
  protected:
    int type_packet_var;
    int hop_numb_var;
    int sum_energy_var;
    int residual_energy_var;
    int min_energy_var;
    int ABCRoutingPacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;
    int *path_var; // array ptr
    unsigned int path_arraysize;

  private:
    void copy(const ABCRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ABCRoutingPacket&);

  public:
    ABCRoutingPacket(const char *name=NULL, int kind=0);
    ABCRoutingPacket(const ABCRoutingPacket& other);
    virtual ~ABCRoutingPacket();
    ABCRoutingPacket& operator=(const ABCRoutingPacket& other);
    virtual ABCRoutingPacket *dup() const {return new ABCRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType_packet() const;
    virtual void setType_packet(int type_packet);
    virtual int getHop_numb() const;
    virtual void setHop_numb(int hop_numb);
    virtual int getSum_energy() const;
    virtual void setSum_energy(int sum_energy);
    virtual int getResidual_energy() const;
    virtual void setResidual_energy(int residual_energy);
    virtual int getMin_energy() const;
    virtual void setMin_energy(int min_energy);
    virtual int getABCRoutingPacketKind() const;
    virtual void setABCRoutingPacketKind(int ABCRoutingPacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual void setPathArraySize(unsigned int size);
    virtual unsigned int getPathArraySize() const;
    virtual int getPath(unsigned int k) const;
    virtual void setPath(unsigned int k, int path);
};

inline void doPacking(cCommBuffer *b, ABCRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ABCRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ABCROUTINGPACKET_M_H_

