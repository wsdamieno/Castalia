//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/stringProtocol/StringPacket.msg.
//

#ifndef _STRINGPACKET_M_H_
#define _STRINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Struct generated from src/node/communication/routing/stringProtocol/StringPacket.msg:25 by nedtool.
 */
struct stringNeighbor
{
    stringNeighbor();
    int id;
    int kVal;
    double rssi;
    double residual;
    double location;
};

void doPacking(cCommBuffer *b, stringNeighbor& a);
void doUnpacking(cCommBuffer *b, stringNeighbor& a);

/**
 * Enum generated from <tt>src/node/communication/routing/stringProtocol/StringPacket.msg:35</tt> by nedtool.
 * <pre>
 * enum StringPacket_Type
 * {
 * 
 *     HELLO_WORD_PACKET = 0;
 *     BROADCAST_PACKET = 1;
 *     TO_SINK_PACKET = 2;
 *     SENT_TO_SINK_PACKET = 3;
 *     END_SETUP_PACKET = 4;
 *     JOIN_RING_PACKET = 5;
 *     ACK_RING_PACKET = 6;
 *     TDMA_RING_PACKET = 7;
 *     DATA_RING_PACKET = 8;
 * }
 * </pre>
 */
enum StringPacket_Type {
    HELLO_WORD_PACKET = 0,
    BROADCAST_PACKET = 1,
    TO_SINK_PACKET = 2,
    SENT_TO_SINK_PACKET = 3,
    END_SETUP_PACKET = 4,
    JOIN_RING_PACKET = 5,
    ACK_RING_PACKET = 6,
    TDMA_RING_PACKET = 7,
    DATA_RING_PACKET = 8
};

/**
 * Class generated from <tt>src/node/communication/routing/stringProtocol/StringPacket.msg:48</tt> by nedtool.
 * <pre>
 * packet StringPacket extends RoutingPacket
 * {
 *     string Isource;
 *     int sinkPosition;
 *     //int kValue;
 *     int currentRound;
 *     int hopNumber;
 *     double sinkRssi;
 *     double location;
 *     double residual;
 *     double moisture;
 *     int StringPacketKind @enum(StringPacket_Type);
 *     int schedule[];
 *     stringNeighbor Neighbors[];
 * }
 * </pre>
 */
class StringPacket : public ::RoutingPacket
{
  protected:
    opp_string Isource_var;
    int sinkPosition_var;
    int currentRound_var;
    int hopNumber_var;
    double sinkRssi_var;
    double location_var;
    double residual_var;
    double moisture_var;
    int StringPacketKind_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;
    stringNeighbor *Neighbors_var; // array ptr
    unsigned int Neighbors_arraysize;

  private:
    void copy(const StringPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StringPacket&);

  public:
    StringPacket(const char *name=NULL, int kind=0);
    StringPacket(const StringPacket& other);
    virtual ~StringPacket();
    StringPacket& operator=(const StringPacket& other);
    virtual StringPacket *dup() const {return new StringPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getIsource() const;
    virtual void setIsource(const char * Isource);
    virtual int getSinkPosition() const;
    virtual void setSinkPosition(int sinkPosition);
    virtual int getCurrentRound() const;
    virtual void setCurrentRound(int currentRound);
    virtual int getHopNumber() const;
    virtual void setHopNumber(int hopNumber);
    virtual double getSinkRssi() const;
    virtual void setSinkRssi(double sinkRssi);
    virtual double getLocation() const;
    virtual void setLocation(double location);
    virtual double getResidual() const;
    virtual void setResidual(double residual);
    virtual double getMoisture() const;
    virtual void setMoisture(double moisture);
    virtual int getStringPacketKind() const;
    virtual void setStringPacketKind(int StringPacketKind);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual void setNeighborsArraySize(unsigned int size);
    virtual unsigned int getNeighborsArraySize() const;
    virtual stringNeighbor& getNeighbors(unsigned int k);
    virtual const stringNeighbor& getNeighbors(unsigned int k) const {return const_cast<StringPacket*>(this)->getNeighbors(k);}
    virtual void setNeighbors(unsigned int k, const stringNeighbor& Neighbors);
};

inline void doPacking(cCommBuffer *b, StringPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StringPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STRINGPACKET_M_H_

